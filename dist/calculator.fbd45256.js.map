{"mappings":"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","sources":["<anon>","assets/scripts/index.js","assets/scripts/keybindings.js","assets/scripts/keyprocessor.js","assets/scripts/calculator.js","node_modules/dx-calc/dxCalc.js","assets/scripts/calculatorProcessor.js","assets/scripts/uiUpdater.js","assets/scripts/lazyDocument.js","assets/scripts/numberDisplayScale.js","assets/scripts/templater.js"],"sourcesContent":["class $af6a74ea1eba3e4b$export$2e2bcd8739ae039 {\n    static #keys = new Map([\n        [\n            [\n                [\n                    '0'\n                ],\n                [\n                    'p'\n                ]\n            ],\n            '0'\n        ],\n        [\n            [\n                [\n                    '1'\n                ],\n                [\n                    'q'\n                ]\n            ],\n            '1'\n        ],\n        [\n            [\n                [\n                    '2'\n                ],\n                [\n                    'w'\n                ]\n            ],\n            '2'\n        ],\n        [\n            [\n                [\n                    '3'\n                ],\n                [\n                    'e'\n                ]\n            ],\n            '3'\n        ],\n        [\n            [\n                [\n                    '4'\n                ],\n                [\n                    'r'\n                ]\n            ],\n            '4'\n        ],\n        [\n            [\n                [\n                    '5'\n                ],\n                [\n                    't'\n                ]\n            ],\n            '5'\n        ],\n        [\n            [\n                [\n                    '6'\n                ],\n                [\n                    'y'\n                ]\n            ],\n            '6'\n        ],\n        [\n            [\n                [\n                    '7'\n                ],\n                [\n                    'u'\n                ]\n            ],\n            '7'\n        ],\n        [\n            [\n                [\n                    '8'\n                ],\n                [\n                    'i'\n                ]\n            ],\n            '8'\n        ],\n        [\n            [\n                [\n                    '9'\n                ],\n                [\n                    'o'\n                ]\n            ],\n            '9'\n        ],\n        [\n            [\n                [\n                    '.'\n                ],\n                [\n                    ','\n                ]\n            ],\n            '.'\n        ],\n        [\n            [\n                [\n                    '-'\n                ],\n                [\n                    'm',\n                    'shift'\n                ]\n            ],\n            '-'\n        ],\n        [\n            [\n                [\n                    \"\\u221A\"\n                ],\n                [\n                    's',\n                    'shift'\n                ]\n            ],\n            \"\\u221A\"\n        ],\n        [\n            [\n                [\n                    '/'\n                ],\n                [\n                    '/',\n                    'shift'\n                ],\n                [\n                    'd',\n                    'shift'\n                ]\n            ],\n            '/'\n        ],\n        [\n            [\n                [\n                    '+'\n                ],\n                [\n                    '+',\n                    'shift'\n                ],\n                [\n                    'p',\n                    'shift'\n                ]\n            ],\n            '+'\n        ],\n        [\n            [\n                [\n                    '*'\n                ],\n                [\n                    '*',\n                    'shift'\n                ],\n                [\n                    't',\n                    'shift'\n                ]\n            ],\n            '*'\n        ],\n        [\n            [\n                [\n                    '='\n                ],\n                [\n                    'e',\n                    'shift'\n                ],\n                [\n                    'enter'\n                ]\n            ],\n            '='\n        ],\n        [\n            [\n                [\n                    'backspace'\n                ],\n                [\n                    'x'\n                ]\n            ],\n            'delete'\n        ],\n        [\n            [\n                [\n                    'c',\n                    'control'\n                ]\n            ],\n            'clear'\n        ],\n        [\n            [\n                [\n                    'escape'\n                ]\n            ],\n            'allClear'\n        ]\n    ]);\n    static processKey(key, shift = false, control = false) {\n        for (const [keybindings, result] of $af6a74ea1eba3e4b$export$2e2bcd8739ae039.#keys)for (const keybinding of keybindings){\n            if (keybinding.includes(key.toLowerCase()) && key !== 'Shift' && key !== 'Control' && shift === keybinding.includes('shift') && control === keybinding.includes('control')) return result;\n        }\n    }\n    static getKeyMap() {\n        return $af6a74ea1eba3e4b$export$2e2bcd8739ae039.#keys;\n    }\n}\n\n\nclass $1aa0a48485615987$export$2e2bcd8739ae039 {\n    #digits;\n    #operators;\n    #calculatorState;\n    constructor(digits, operators, calculatorState){\n        this.#digits = digits;\n        this.#operators = operators;\n        this.#calculatorState = calculatorState;\n    }\n    #handleUniqueResponse(response) {\n        switch(response){\n            case '=':\n                this.#calculatorState.equal();\n                break;\n            case '.':\n                this.#calculatorState.decimal();\n                break;\n            case 'delete':\n                this.#calculatorState.delete();\n                break;\n            case 'clear':\n                this.#calculatorState.clear();\n                break;\n            case 'allClear':\n                this.#calculatorState.allClear();\n                break;\n            default:\n                throw new Error(`The ${response} is not a handled case!`);\n        }\n    }\n    process(response) {\n        if (this.#digits.includes(response)) this.#calculatorState.number(response);\n        else if (this.#operators.includes(response)) this.#calculatorState.operator(response);\n        else this.#handleUniqueResponse(response);\n    }\n}\n\n\nclass $64c96a00cf577fd3$export$2e2bcd8739ae039 {\n    #_isNegative;\n    #_digits;\n    #_integer = {};\n    #_decimal = {};\n    static #_scale;\n    static #_token;\n    constructor(number, token){\n        if (token !== $64c96a00cf577fd3$export$2e2bcd8739ae039.#_token) $64c96a00cf577fd3$export$2e2bcd8739ae039.#callError('newDXCalcCalled');\n        const numberString = $64c96a00cf577fd3$export$2e2bcd8739ae039.#normalize(number);\n        this.#decomposeNumber(numberString);\n    }\n    get digits() {\n        return this.#_digits;\n    }\n    get isNegative() {\n        return this.#_isNegative;\n    }\n    get integer() {\n        return this.#_integer;\n    }\n    get sciNum() {\n        return $64c96a00cf577fd3$export$2e2bcd8739ae039.#enScientify(this.value);\n    }\n    get decimal() {\n        return this.#_decimal;\n    }\n    get value() {\n        return $64c96a00cf577fd3$export$2e2bcd8739ae039.#formatToDecimal(this.#_digits.toString(), this.#_decimal?.length);\n    }\n    add(secondNumber) {\n        if (secondNumber instanceof $64c96a00cf577fd3$export$2e2bcd8739ae039 === false) secondNumber = $64c96a00cf577fd3$export$2e2bcd8739ae039.number(secondNumber);\n        const maxDecimalLength = Math.max(this.#_decimal?.length ?? 0, secondNumber.#_decimal?.length ?? 0);\n        const firstNumberValue = this.#rescaleDecimal(maxDecimalLength);\n        const secondNumberValue = secondNumber.#rescaleDecimal(maxDecimalLength);\n        const numberResult = firstNumberValue + secondNumberValue;\n        return $64c96a00cf577fd3$export$2e2bcd8739ae039.number($64c96a00cf577fd3$export$2e2bcd8739ae039.#formatToDecimal(numberResult, maxDecimalLength));\n    }\n    subtract(secondNumber) {\n        if (secondNumber instanceof $64c96a00cf577fd3$export$2e2bcd8739ae039 === false) secondNumber = $64c96a00cf577fd3$export$2e2bcd8739ae039.number(secondNumber);\n        secondNumber.#_digits *= -1n; // invert sign\n        secondNumber.#_isNegative ^= true; // toggle true | false\n        return this.add(secondNumber);\n    }\n    multiply(secondNumber) {\n        if (secondNumber instanceof $64c96a00cf577fd3$export$2e2bcd8739ae039 === false) secondNumber = $64c96a00cf577fd3$export$2e2bcd8739ae039.number(secondNumber);\n        const sumLength = (this.#_decimal?.length ?? 0) + (secondNumber.#_decimal?.length ?? 0);\n        const numberResult = this.#_digits * secondNumber.#_digits;\n        return $64c96a00cf577fd3$export$2e2bcd8739ae039.number($64c96a00cf577fd3$export$2e2bcd8739ae039.#formatToDecimal(numberResult, sumLength));\n    }\n    divide(secondNumber) {\n        if (secondNumber instanceof $64c96a00cf577fd3$export$2e2bcd8739ae039 === false) secondNumber = $64c96a00cf577fd3$export$2e2bcd8739ae039.number(secondNumber);\n        const maxDecimalLength = Math.max(this.#_decimal?.length ?? 0, secondNumber.#_decimal?.length ?? 0);\n        const divident = this.#rescaleDecimal(maxDecimalLength);\n        const divisor = secondNumber.#rescaleDecimal(maxDecimalLength);\n        if (divisor === 0n) return $64c96a00cf577fd3$export$2e2bcd8739ae039.#callError('divideZero');\n        const adjustDividentForDivision = (divident, divisor, iterations = 0)=>{\n            if (iterations <= $64c96a00cf577fd3$export$2e2bcd8739ae039.#_scale && divident % divisor !== 0n) {\n                const newDivident = divident * 10n;\n                iterations++; // THIS DOESN'T WORK\n                return adjustDividentForDivision(newDivident, divisor, iterations);\n            } else return [\n                divident,\n                iterations\n            ];\n        };\n        $64c96a00cf577fd3$export$2e2bcd8739ae039.#_scale++;\n        const [adjustedDivident, addedDecimals] = adjustDividentForDivision(divident, divisor);\n        $64c96a00cf577fd3$export$2e2bcd8739ae039.#_scale--;\n        const quotient = (adjustedDivident / divisor).toString();\n        const formattedQuotient = $64c96a00cf577fd3$export$2e2bcd8739ae039.#formatToDecimal(quotient, addedDecimals);\n        const DXCalcResult = $64c96a00cf577fd3$export$2e2bcd8739ae039.number(formattedQuotient);\n        return DXCalcResult;\n    }\n    sqrt() {\n        if (this.#_isNegative) $64c96a00cf577fd3$export$2e2bcd8739ae039.#callError('negativeForbidden', this.value);\n        const sqrt = $64c96a00cf577fd3$export$2e2bcd8739ae039.#newtonsMethodSqrt(this);\n        return $64c96a00cf577fd3$export$2e2bcd8739ae039.number(sqrt.value.slice(0, $64c96a00cf577fd3$export$2e2bcd8739ae039.#_scale + 1 + sqrt.#_integer.length));\n    }\n    static get scale() {\n        return $64c96a00cf577fd3$export$2e2bcd8739ae039.#_scale;\n    }\n    static number(input) {\n        if (input instanceof $64c96a00cf577fd3$export$2e2bcd8739ae039) return input;\n        const validatedInput = $64c96a00cf577fd3$export$2e2bcd8739ae039.#validate(input);\n        return new $64c96a00cf577fd3$export$2e2bcd8739ae039(validatedInput, $64c96a00cf577fd3$export$2e2bcd8739ae039.#_token);\n    }\n    static{\n        $64c96a00cf577fd3$export$2e2bcd8739ae039.#_scale = 9;\n        $64c96a00cf577fd3$export$2e2bcd8739ae039.#_token = Symbol('unique identifier');\n        // aliases\n        $64c96a00cf577fd3$export$2e2bcd8739ae039.from = $64c96a00cf577fd3$export$2e2bcd8739ae039.number;\n        $64c96a00cf577fd3$export$2e2bcd8739ae039.prototype.times = $64c96a00cf577fd3$export$2e2bcd8739ae039.prototype.multiply;\n        $64c96a00cf577fd3$export$2e2bcd8739ae039.prototype.plus = $64c96a00cf577fd3$export$2e2bcd8739ae039.prototype.add;\n        $64c96a00cf577fd3$export$2e2bcd8739ae039.prototype.minus = $64c96a00cf577fd3$export$2e2bcd8739ae039.prototype.subtract;\n        $64c96a00cf577fd3$export$2e2bcd8739ae039.prototype.div = $64c96a00cf577fd3$export$2e2bcd8739ae039.prototype.divide;\n    }\n    static setScale = (scale)=>{\n        if (typeof scale === 'number') {\n            $64c96a00cf577fd3$export$2e2bcd8739ae039.#validate(scale, 'scale');\n            if (scale > 0) $64c96a00cf577fd3$export$2e2bcd8739ae039.#_scale = scale;\n            else $64c96a00cf577fd3$export$2e2bcd8739ae039.#callError('numNeedMoreThanZero');\n        } else $64c96a00cf577fd3$export$2e2bcd8739ae039.#callError('unsupportedType', scale);\n        return $64c96a00cf577fd3$export$2e2bcd8739ae039;\n    };\n    static longScale() {\n        $64c96a00cf577fd3$export$2e2bcd8739ae039.setScale(20);\n        return $64c96a00cf577fd3$export$2e2bcd8739ae039;\n    }\n    #rescaleDecimal(scale) {\n        const decimalsNeeded = scale - (this?.#_decimal?.length || 0);\n        if (decimalsNeeded < 0) return this.#_digits / 10n ** -BigInt(decimalsNeeded);\n        return this.#_digits * 10n ** BigInt(decimalsNeeded);\n    }\n    static #validate(number, mode = 'default') {\n        switch(typeof number){\n            case 'string':\n                break;\n            case 'number':\n                if (mode !== 'scale') $64c96a00cf577fd3$export$2e2bcd8739ae039.#warning('inputNumber');\n                number = number.toString();\n                break;\n            case 'bigint':\n                number = number.toString();\n                break;\n            default:\n                return $64c96a00cf577fd3$export$2e2bcd8739ae039.#callError('unsupportedType', number);\n        }\n        number = number.trim();\n        const validNumberRegex = mode === 'scale' ? /^[+-]?(\\d+)$/ : /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?$/;\n        if (!validNumberRegex.test(number)) return $64c96a00cf577fd3$export$2e2bcd8739ae039.#callError('badNum', number);\n        switch(mode){\n            case 'default':\n                return number;\n            case 'scale':\n                return +number;\n            default:\n                $64c96a00cf577fd3$export$2e2bcd8739ae039.#callError('unsupportedValidateMode');\n        }\n    }\n    static #callError(error = 'default', info) {\n        switch(error){\n            case 'numNeedMoreThanZero':\n                throw new Error('\\nThe number ${info} is invalid!\\nMust be more than zero');\n            case 'newDXCalcCalled':\n                throw new Error('\\nDXCalc constructor cannot be called directly.\\nUse DXCalc.number() instead.');\n            case 'unsupportedValidateMode':\n                throw new Error(`\\nUnsupported validate mode <${info}>!\\nPlease refer to the documentation.`);\n            case 'unsupportedType':\n                throw new Error(`\\nUnsupported type <${typeof info}>!\\nPlease refer to the documentation.`);\n            case 'badNum':\n                if (info === '') info = 'empty string';\n                throw new Error(`\\nIncorrect number: <${info}> is not a valid number!`);\n            case 'badScale':\n                throw new Error(`\\nCannot have less than 0 decimals: <${info}>!`);\n            case 'divideZero':\n                throw new Error('\\nCannot divide by zero!');\n            case 'negSqrt':\n                throw new Error('\\nSquare root of a negative number is imaginary!');\n            case 'negativeForbidden':\n                throw new Error(`\\nNumber <${info}> not in range: only positive numbers allowed!`);\n            case 'default':\n                throw new Error(\"\\nFatal error, that's all we know...\");\n        }\n    }\n    static #warning(warning = 'default', info) {\n        switch(warning){\n            case 'inputNumber':\n                console.warn(\"Don't use number type: Prefer string or bigint input for higher precision and avoiding bugs\");\n                break;\n            default:\n                console.warn(\"This is a warning, that's all we know...\");\n        }\n    }\n    static #normalize = (number)=>{\n        const numberString = number.toString();\n        const descientifiedNumber = numberString.includes('e') || numberString.includes('E') ? $64c96a00cf577fd3$export$2e2bcd8739ae039.#deScientify(numberString) : numberString;\n        const scaledNumber = $64c96a00cf577fd3$export$2e2bcd8739ae039.#trimNumberToScale(descientifiedNumber);\n        const trimmedNumber = $64c96a00cf577fd3$export$2e2bcd8739ae039.#trimZeroes(scaledNumber);\n        return trimmedNumber;\n    };\n    static #formatToDecimal(digits, decimals) {\n        const digitsString = digits.toString();\n        const sign = digitsString[0] === '-' ? '-' : '';\n        const pureDigitsString = digitsString.slice(sign.length);\n        const digitsLength = pureDigitsString.length;\n        const getResult = ()=>{\n            const originalNumber = sign + pureDigitsString;\n            if (decimals === 0 || decimals === undefined) return originalNumber;\n            else if (decimals < 0) return sign + pureDigitsString + '0'.repeat(-decimals);\n            else if (digitsLength > decimals) return sign + pureDigitsString.slice(0, digitsLength - decimals) + '.' + pureDigitsString.slice(digitsLength - decimals);\n            else return sign + '0.' + '0'.repeat(decimals - digitsLength) + pureDigitsString;\n        };\n        const result = getResult();\n        return $64c96a00cf577fd3$export$2e2bcd8739ae039.#trimZeroes(result);\n    }\n    static #trimZeroes = (numberString)=>{\n        const dotIndex = numberString.indexOf('.');\n        const sign = numberString[0] === '-' ? '-' : '';\n        numberString = numberString.replace('-', '').replace(/^0+/g, '');\n        if (numberString.includes('.')) {\n            numberString = numberString.replace(/0+$/g, '');\n            if (numberString.at(-1) === '.') numberString = numberString.slice(0, -1);\n            if (numberString.at(0) === '.') numberString = '0' + numberString;\n        }\n        const [mantissa, decimal] = numberString.split('.');\n        if (mantissa === '' && decimal !== undefined) numberString = '0.' + decimal;\n        return numberString === '' ? '0' : sign + numberString;\n    };\n    static #deScientify = (str)=>{\n        const [mantissa, exponent = '0'] = str.split('e');\n        const [integer, decimal] = mantissa.split('.');\n        const negativeExponent = exponent[0] === '-';\n        const exponentValue = +(negativeExponent ? exponent.slice(1) : exponent);\n        if (negativeExponent) return $64c96a00cf577fd3$export$2e2bcd8739ae039.#formatToDecimal(integer + (decimal ?? ''), exponentValue + (decimal?.length ?? 0));\n        else return $64c96a00cf577fd3$export$2e2bcd8739ae039.#formatToDecimal(integer + (decimal ?? ''), (decimal?.length ?? 0) - exponentValue);\n    };\n    static #enScientify(stringNumber) {\n        const validatedNumber = $64c96a00cf577fd3$export$2e2bcd8739ae039.#validate(stringNumber);\n        const realStringNumber = $64c96a00cf577fd3$export$2e2bcd8739ae039.#trimZeroes(stringNumber);\n        const getDescientifiedNumber = ()=>{\n            if (validatedNumber.includes('e') || validatedNumber.includes('E')) return $64c96a00cf577fd3$export$2e2bcd8739ae039.#deScientify(realStringNumber);\n            else return realStringNumber;\n        };\n        const descientifiedNumber = getDescientifiedNumber();\n        const [integer, decimal = ''] = descientifiedNumber.split('.');\n        const sign = integer[0] === '-' ? '-' : '';\n        const pureDigits = $64c96a00cf577fd3$export$2e2bcd8739ae039.#trimZeroes((integer + decimal).slice(sign.length));\n        const calculateMantissa = ()=>{\n            const mantissaHasDecimal = pureDigits.length > 1;\n            const mantissaWithDecimal = pureDigits[0] + '.' + pureDigits.slice(1);\n            if (mantissaHasDecimal) return sign + mantissaWithDecimal;\n            else return sign + integer;\n        };\n        const mantissa = calculateMantissa();\n        const decimalPoint = descientifiedNumber.includes('.') ? '.' : '';\n        const [mantissaInteger, mantissaDecimal] = mantissa.split('.');\n        const calculateExponentValue = ()=>{\n            const exponentIsPositive = pureDigits.length + sign.length === descientifiedNumber.length - decimalPoint.length;\n            const positiveExponentValue = integer.length - mantissaInteger.length;\n            const negativeExponentValue = pureDigits.length - descientifiedNumber.length + decimalPoint.length + sign.length;\n            if (exponentIsPositive) return positiveExponentValue;\n            else return negativeExponentValue;\n        };\n        const exponentValue = calculateExponentValue();\n        const exponentString = exponentValue === 0 ? '' : 'e' + exponentValue;\n        return mantissa + exponentString;\n    }\n    static #roundLastDecimal(str) {\n        const validatedString = $64c96a00cf577fd3$export$2e2bcd8739ae039.#validate(str);\n        const sign = validatedString[0] === '-' ? '-' : '';\n        let absoluteDigits = BigInt(validatedString.replace(/^-|\\./g, ''));\n        const decimalLength = validatedString.split('.')[1]?.length ?? 0;\n        if (absoluteDigits % 10n >= 5n) absoluteDigits += 10n;\n        absoluteDigits -= absoluteDigits % 10n;\n        absoluteDigits /= 10n;\n        return $64c96a00cf577fd3$export$2e2bcd8739ae039.#formatToDecimal(sign + absoluteDigits.toString(), Math.min($64c96a00cf577fd3$export$2e2bcd8739ae039.#_scale, decimalLength));\n    }\n    static #trimNumberToScale(str) {\n        const validatedString = $64c96a00cf577fd3$export$2e2bcd8739ae039.#validate(str);\n        let [integer, decimal] = validatedString.split('.');\n        const sign = validatedString[0] === '-' ? '-' : '';\n        if (decimal === undefined || decimal.length <= $64c96a00cf577fd3$export$2e2bcd8739ae039.#_scale) return validatedString;\n        decimal = decimal.slice(0, $64c96a00cf577fd3$export$2e2bcd8739ae039.#_scale + 1);\n        return $64c96a00cf577fd3$export$2e2bcd8739ae039.#roundLastDecimal(integer + '.' + decimal);\n    }\n    static #newtonsMethodSqrt(number) {\n        if (number.#_digits === 0n) return number;\n        // temporary increase for precision\n        $64c96a00cf577fd3$export$2e2bcd8739ae039.#_scale++;\n        // safeguard\n        const maxIterations = 100;\n        // newtons Method\n        const newGuess = (currentGuess)=>currentGuess.add(number.divide(currentGuess)).divide('2');\n        // initial guess for newtons method\n        let currentGuess = $64c96a00cf577fd3$export$2e2bcd8739ae039.number('1');\n        for(let i = 0; i < maxIterations; i++){\n            const nextGuess = newGuess(currentGuess);\n            const difference = currentGuess.subtract(nextGuess);\n            const perfectPrecision = difference.#_digits === 0n;\n            const hasEnoughPrecision = difference.#_decimal?.startsWith('0'.repeat(this.#_scale - 1)) ?? false;\n            if (perfectPrecision || hasEnoughPrecision) break;\n            else currentGuess = newGuess(currentGuess);\n        }\n        $64c96a00cf577fd3$export$2e2bcd8739ae039.#_scale--;\n        // automatically scales the decimal of guess down\n        currentGuess = $64c96a00cf577fd3$export$2e2bcd8739ae039.number(currentGuess.value);\n        return currentGuess;\n    }\n    #decomposeNumber(str) {\n        this.#_isNegative = str[0] === '-';\n        this.#_digits = BigInt(str.replace(/\\./g, ''));\n        [this.#_integer, this.#_decimal] = str.split('.');\n        if (this.#_isNegative) this.#_integer = this.#_integer.slice(1);\n    }\n}\n\n\nclass $ef2afadab83ce56d$export$2e2bcd8739ae039 {\n    #numberStack = [\n        ''\n    ];\n    #operatorStack = [];\n    #editMode = false;\n    #editIndex;\n    get publicNumberStack() {\n        return [\n            ...this.#numberStack\n        ];\n    }\n    get publicOperatorStack() {\n        return [\n            ...this.#operatorStack\n        ];\n    }\n    static #binaryOperations = {\n        '+': (x, y)=>(0, $64c96a00cf577fd3$export$2e2bcd8739ae039).number(x).add(y).value,\n        '-': (x, y)=>(0, $64c96a00cf577fd3$export$2e2bcd8739ae039).number(x).subtract(y).value,\n        '*': (x, y)=>(0, $64c96a00cf577fd3$export$2e2bcd8739ae039).number(x).multiply(y).value,\n        '/': (x, y)=>(0, $64c96a00cf577fd3$export$2e2bcd8739ae039).number(x).divide(y).value\n    };\n    static #unaryOperations = {\n        \"\\u221A\": (x)=>(0, $64c96a00cf577fd3$export$2e2bcd8739ae039).number(x).sqrt().value,\n        'negate': (x)=>(0, $64c96a00cf577fd3$export$2e2bcd8739ae039).number(x).multiply('-1')\n    };\n    static #isUnary(operator) {\n        return $ef2afadab83ce56d$export$2e2bcd8739ae039.#unaryOperations.hasOwnProperty(operator);\n    }\n    static #isBinary(operator) {\n        return $ef2afadab83ce56d$export$2e2bcd8739ae039.#binaryOperations.hasOwnProperty(operator);\n    }\n    toggleEditMode() {\n        this.#editMode ^= true;\n    }\n    getEditMode() {\n        return this.#editMode;\n    }\n    setEditIndex(index) {\n        this.#editIndex = this.#numberStack.length - 1 - index;\n    }\n    clear() {\n        if (this.#editMode) this.#numberStack[this.#editIndex] = '';\n        else {\n            this.#numberStack.pop();\n            this.#numberStack.push('');\n        }\n    }\n    allClear() {\n        if (!this.#editMode) {\n            this.#numberStack = [\n                ''\n            ];\n            this.#operatorStack = [];\n        }\n    }\n    deleteCharacter() {\n        if (this.currentNumber !== '') {\n            if (this.#editMode) this.#numberStack[this.#editIndex] = this.#numberStack[this.#editIndex].slice(0, -1);\n            else this.#numberStack.push(this.#numberStack.pop().slice(0, -1));\n        } else if (this.currentOperator !== undefined) {\n            if (!this.#editMode) {\n                this.#operatorStack.pop();\n                if (this.previousNumber !== undefined) this.#numberStack.pop();\n            }\n        }\n    }\n    get currentOperator() {\n        if (this.#editMode) return this.#operatorStack[this.#editIndex];\n        return this.#operatorStack.at(-1);\n    }\n    get currentNumber() {\n        if (this.#editMode) return this.#numberStack[this.#editIndex];\n        return this.#numberStack.at(-1);\n    }\n    get previousNumber() {\n        if (this.#editMode) return this.#numberStack[this.#editIndex - 1];\n        else return this.#numberStack.at(-2);\n    }\n    get previousOperator() {\n        return this.#operatorStack.at(-2);\n    }\n    conditionalAddDecimalSign() {\n        if (!this.currentNumber.includes('.')) {\n            if (this.#editMode) this.#numberStack[this.#editIndex] += '.';\n            else this.#numberStack.push(this.#numberStack.pop().concat('.'));\n        }\n    }\n    addNumber(stringNumber) {\n        if (this.#editMode) this.#numberStack[this.#editIndex] = this.#numberStack[this.#editIndex] + stringNumber;\n        else {\n            const lastNumber = this.#numberStack.pop();\n            const newNumber = lastNumber + stringNumber;\n            this.#numberStack.push(newNumber);\n        }\n    }\n    addOperator(newOperator) {\n        let sameGroup = false;\n        switch(this.#canAddOperator(newOperator)){\n            case true:\n                this.#operatorStack.push(newOperator);\n                break;\n            case false:\n                break;\n            case 'negate':\n                if (this.currentNumber !== '-') {\n                    this.#numberStack.pop();\n                    this.#numberStack.push('-');\n                }\n                break;\n            case 'sameGroup':\n                sameGroup = true;\n                this.#operatorStack.pop();\n                this.#operatorStack.push(newOperator);\n                break;\n            case 'editMode':\n                sameGroup = true;\n                this.#operatorStack[this.#editIndex] = newOperator;\n                return;\n        }\n        if ($ef2afadab83ce56d$export$2e2bcd8739ae039.#isUnary(this.currentOperator) && this.currentNumber !== '') {\n            this.#makeCalculation();\n            let tempCurrentOperator = this.#operatorStack.pop();\n            this.#operatorStack.push('*');\n            this.#operatorStack.push(tempCurrentOperator);\n            this.#breakNumber();\n            tempCurrentOperator = null;\n        }\n        if (this.previousOperator !== undefined) this.#makeCalculation();\n        if (!$ef2afadab83ce56d$export$2e2bcd8739ae039.#isUnary(this.currentOperator) && !sameGroup && this.#numberStack[0] !== '-' && this.currentOperator !== '=') this.#breakNumber();\n        if (this.currentOperator === '=') this.#operatorStack.pop();\n    }\n    calculate() {\n        if (!this.#editMode) {\n            this.#operatorStack.push('non-existant operator');\n            this.#makeCalculation();\n            this.#operatorStack.pop();\n        }\n    }\n    #canAddOperator(newOperator) {\n        const currentOperatorSameGroup = $ef2afadab83ce56d$export$2e2bcd8739ae039.#isUnary(this.currentOperator) && $ef2afadab83ce56d$export$2e2bcd8739ae039.#isUnary(newOperator) || $ef2afadab83ce56d$export$2e2bcd8739ae039.#isBinary(this.currentOperator) && $ef2afadab83ce56d$export$2e2bcd8739ae039.#isBinary(newOperator);\n        if (this.#editMode) return 'editMode';\n        if (newOperator === '-' && this.#numberStack.length === 1 && this.#numberStack[0] === '' || this.#numberStack[0] === '-') return 'negate';\n        if (this.currentNumber === '') {\n            if (currentOperatorSameGroup) return 'sameGroup';\n            else if ($ef2afadab83ce56d$export$2e2bcd8739ae039.#isUnary(newOperator)) return true;\n            else return false;\n        }\n        return true;\n    }\n    #breakNumber() {\n        this.#numberStack.push('');\n    }\n    #pushCalculation(result) {\n        this.#numberStack.push(result);\n        this.#operatorStack.splice(-2, 1);\n    }\n    #unaryCalculate(operator) {\n        const poppedNumber = this.#numberStack.pop();\n        const calculation = $ef2afadab83ce56d$export$2e2bcd8739ae039.#unaryOperations[operator];\n        const result = calculation(poppedNumber);\n        this.#pushCalculation(result);\n    }\n    #binaryCalculate(operator) {\n        const poppedNumbers = this.#numberStack.splice(-2, 2);\n        const calculation = $ef2afadab83ce56d$export$2e2bcd8739ae039.#binaryOperations[operator];\n        const result = calculation(...poppedNumbers);\n        this.#pushCalculation(result);\n    }\n    #makeCalculation() {\n        if ($ef2afadab83ce56d$export$2e2bcd8739ae039.#isUnary(this.previousOperator)) this.#unaryCalculate(this.previousOperator);\n        else if (!$ef2afadab83ce56d$export$2e2bcd8739ae039.#isUnary(this.currentOperator) && $ef2afadab83ce56d$export$2e2bcd8739ae039.#isBinary(this.previousOperator)) this.#binaryCalculate(this.previousOperator);\n        if (this.#operatorStack.length > 1 && !$ef2afadab83ce56d$export$2e2bcd8739ae039.#isUnary(this.currentOperator)) this.#makeCalculation();\n    }\n}\n\n\nclass $076d7b9ccaf686f6$export$2e2bcd8739ae039 {\n    #UI;\n    #calculator;\n    constructor(UI, calculator){\n        this.#UI = UI;\n        this.#calculator = calculator;\n    }\n    stdUpdateUI() {\n        this.#UI.updateNumber(this.#calculator.currentNumber ?? '');\n        this.#UI.updateOperator(this.#calculator.currentOperator ?? '');\n        this.#UI.updateAlternateNumbers(this.#calculator.publicNumberStack);\n    }\n    number(number) {\n        this.#calculator.addNumber(number);\n        this.#UI.updateNumber(this.#calculator.currentNumber);\n        this.#UI.updateAlternateNumbers(this.#calculator.publicNumberStack);\n    }\n    operator(operator) {\n        this.#calculator.addOperator(operator);\n        this.#UI.updateNumber(this.#calculator.previousNumber ?? this.#calculator.currentNumber);\n        this.#UI.updateOperator(this.#calculator.currentOperator);\n        this.#UI.updateAlternateNumbers(this.#calculator.publicNumberStack);\n    }\n    decimal() {\n        this.#calculator.conditionalAddDecimalSign();\n        this.#UI.updateNumber(this.#calculator.currentNumber);\n        this.#UI.updateAlternateNumbers(this.#calculator.publicNumberStack);\n    }\n    equal() {\n        this.#calculator.calculate();\n        this.stdUpdateUI();\n        this.#UI.updateActiveAlternateNumber();\n    }\n    delete() {\n        this.#calculator.deleteCharacter();\n        this.stdUpdateUI();\n    }\n    clear() {\n        this.#calculator.clear();\n        this.#UI.updateNumber(this.#calculator.currentNumber);\n        this.#UI.updateAlternateNumbers(this.#calculator.publicNumberStack);\n    }\n    allClear() {\n        this.#calculator.allClear();\n        this.stdUpdateUI();\n    }\n}\n\n\nclass $7d48db17c3f862ed$export$2e2bcd8739ae039 {\n    #node;\n    constructor(node){\n        this.#node = node;\n    }\n    node(selector1) {\n        return this.#node.querySelector(selector1);\n    }\n    nodes(selector1) {\n        return this.#node.querySelectorAll(selector1);\n    }\n    nodesArray() {\n        return Array.from(this.#node.querySelectorAll(selector));\n    }\n    event(event, callable) {\n        return this.#node.addEventListener(event, callable);\n    }\n    get() {\n        return this.#node;\n    }\n}\n\n\nclass $99e0c77678009629$export$2e2bcd8739ae039 {\n    #numberElement;\n    #operatorElement;\n    #alternateNumbers;\n    #alternateNumbersSelector;\n    #alternateNumberTemplate;\n    #activeAlternateNumber;\n    #keymap;\n    #operatorMap = {\n        '/': \"\\xf7\",\n        '*': \"\\xd7\"\n    };\n    constructor(numberElement, operatorElement, alternateNumbers, alternateNumberTemplate, keymap){\n        this.#numberElement = numberElement;\n        this.#operatorElement = operatorElement;\n        this.#alternateNumbers = alternateNumbers;\n        this.#alternateNumberTemplate = alternateNumberTemplate.cloneNode(true);\n        this.#keymap = keymap;\n        this.#alternateNumbersSelector = new (0, $7d48db17c3f862ed$export$2e2bcd8739ae039)(this.#alternateNumbers);\n        alternateNumberTemplate.remove();\n    }\n    makeAlternateNumber(number = '', active = false) {\n        const newNumber = this.#alternateNumberTemplate.cloneNode(true);\n        newNumber.textContent = number.toString();\n        if (active) newNumber.classList.add('active');\n        return newNumber;\n    }\n    updateActiveAlternateNumber(number = 0) {\n        this.#activeAlternateNumber = number;\n    }\n    updateAlternateNumbers(numbersArray) {\n        const alternateNumbers = numbersArray.filter((number)=>number !== '').map((number)=>this.makeAlternateNumber(number));\n        if (alternateNumbers.length > 1) {\n            alternateNumbers.reverse();\n            alternateNumbers[this.#activeAlternateNumber ?? 0].classList.add('active');\n            this.#alternateNumbers.replaceChildren(...alternateNumbers);\n        } else this.#alternateNumbers.replaceChildren();\n    }\n    updateNumber(number) {\n        this.#numberElement.textContent = number === '' ? '__' : number;\n    }\n    updateOperator(operator) {\n        if (operator in this.#operatorMap) this.#operatorElement.textContent = this.#operatorMap[operator];\n        else this.#operatorElement.textContent = operator;\n    }\n    static addNewChild(parentNode, newNode) {\n        parentNode.appendChild(newNode);\n    }\n}\n\n\n\nclass $fba16cc1b8961a5a$export$2e2bcd8739ae039 {\n    #numberDisplay;\n    #numberDisplayText;\n    #initFontSize;\n    constructor(numberElement, numberTextElement, fontSize){\n        this.#numberDisplay = numberElement;\n        this.#numberDisplayText = numberTextElement;\n        this.#initFontSize = fontSize;\n    }\n    #clamp(number, min, max) {\n        return Math.max(min, Math.min(number, max));\n    }\n    #handleFontSize() {\n        const scale = this.#numberDisplay.clientWidth / this.#numberDisplayText.clientWidth;\n        const fontSize = this.#numberDisplayText.style.fontSize?.split('px')[0] || this.#initFontSize;\n        const newFontSize = this.#clamp(fontSize * scale, +this.#initFontSize / 3, +this.#initFontSize);\n        this.#numberDisplayText.style.fontSize = newFontSize + 'px';\n    }\n    start() {\n        new ResizeObserver(()=>{\n            this.#handleFontSize();\n        }).observe(this.#numberDisplayText);\n    }\n}\n\n\nclass $e972ca7a270b546d$export$2e2bcd8739ae039 {\n    get node() {\n        return this.element;\n    }\n    constructor(element){\n        this.element = document.createElement(element);\n    }\n    addClass(newClass) {\n        this.element.classList.add(newClass);\n        return this;\n    }\n    removeClass(oldClass) {\n        this.element.classList.remove(oldClass);\n        return this;\n    }\n    addText(text) {\n        this.element.textContent = text;\n        return this;\n    }\n    addChild(node) {\n        this.element.appendChild(node);\n        return this;\n    }\n}\n\n\nconst $65ed21acd2d13806$var$doc = new (0, $7d48db17c3f862ed$export$2e2bcd8739ae039)(document);\nconst $65ed21acd2d13806$var$calc = new (0, $7d48db17c3f862ed$export$2e2bcd8739ae039)($65ed21acd2d13806$var$doc.node('#calculator'));\nconst $65ed21acd2d13806$var$numberDisplay = $65ed21acd2d13806$var$calc.node('#number-display');\nconst $65ed21acd2d13806$var$operatorDisplay = $65ed21acd2d13806$var$calc.node('#operator-display');\nconst $65ed21acd2d13806$var$alternateNumbers = $65ed21acd2d13806$var$calc.node('#alternate-numbers');\nconst $65ed21acd2d13806$var$numberDisplayText = new (0, $7d48db17c3f862ed$export$2e2bcd8739ae039)($65ed21acd2d13806$var$numberDisplay).node('p');\nconst $65ed21acd2d13806$var$initNumberFontSize = window.getComputedStyle($65ed21acd2d13806$var$numberDisplayText).fontSize.split('px')[0];\nconst $65ed21acd2d13806$var$calculator = new (0, $ef2afadab83ce56d$export$2e2bcd8739ae039)();\nconst $65ed21acd2d13806$var$UI = new (0, $99e0c77678009629$export$2e2bcd8739ae039)($65ed21acd2d13806$var$numberDisplayText, $65ed21acd2d13806$var$operatorDisplay, $65ed21acd2d13806$var$alternateNumbers, new (0, $e972ca7a270b546d$export$2e2bcd8739ae039)('div').addClass('alternate-number').node, (0, $af6a74ea1eba3e4b$export$2e2bcd8739ae039).getKeyMap());\nconst $65ed21acd2d13806$var$calculatorState = new (0, $076d7b9ccaf686f6$export$2e2bcd8739ae039)($65ed21acd2d13806$var$UI, $65ed21acd2d13806$var$calculator);\nconst $65ed21acd2d13806$var$numberElements = $65ed21acd2d13806$var$calc.nodes('[id^=\"num-\"].number');\nconst $65ed21acd2d13806$var$operatorElements = $65ed21acd2d13806$var$calc.nodes('[id^=\"oper-\"].operator');\nconst $65ed21acd2d13806$var$decimalSign = $65ed21acd2d13806$var$calc.node('#decimal-sign');\nconst $65ed21acd2d13806$var$equalSign = $65ed21acd2d13806$var$calc.node('#equal-sign');\nconst $65ed21acd2d13806$var$deleteDigit = $65ed21acd2d13806$var$calc.node('#delete-digit');\nconst $65ed21acd2d13806$var$clearEntry = $65ed21acd2d13806$var$calc.node('#clear-entry');\nconst $65ed21acd2d13806$var$allClearEntry = $65ed21acd2d13806$var$calc.node('#all-clear-entry');\nconst $65ed21acd2d13806$var$copyClipboard = $65ed21acd2d13806$var$calc.node('#copy-clipboard');\nconst $65ed21acd2d13806$var$hideAlternateNumbers = $65ed21acd2d13806$var$calc.node('#hide-alternate-numbers');\nconst $65ed21acd2d13806$var$digitMap = {\n    'num-1': '1',\n    'num-2': '2',\n    'num-3': '3',\n    'num-4': '4',\n    'num-5': '5',\n    'num-6': '6',\n    'num-7': '7',\n    'num-8': '8',\n    'num-9': '9',\n    'num-0': '0'\n};\nconst $65ed21acd2d13806$var$operatorMap = {\n    'oper-plus': '+',\n    'oper-minus': '-',\n    'oper-multiply': '*',\n    'oper-divide': '/',\n    'oper-sqrt': \"\\u221A\"\n};\nconst $65ed21acd2d13806$var$keyProcessor = new (0, $1aa0a48485615987$export$2e2bcd8739ae039)(Object.values($65ed21acd2d13806$var$digitMap), Object.values($65ed21acd2d13806$var$operatorMap), $65ed21acd2d13806$var$calculatorState);\n$65ed21acd2d13806$var$numberElements.forEach((number)=>{\n    new (0, $7d48db17c3f862ed$export$2e2bcd8739ae039)(number).event('click', ()=>$65ed21acd2d13806$var$calculatorState.number($65ed21acd2d13806$var$digitMap[number.id]));\n});\n$65ed21acd2d13806$var$operatorElements.forEach((operator)=>{\n    new (0, $7d48db17c3f862ed$export$2e2bcd8739ae039)(operator).event('click', ()=>$65ed21acd2d13806$var$calculatorState.operator($65ed21acd2d13806$var$operatorMap[operator.id]));\n});\nnew (0, $7d48db17c3f862ed$export$2e2bcd8739ae039)($65ed21acd2d13806$var$decimalSign).event('click', ()=>$65ed21acd2d13806$var$calculatorState.decimal());\nnew (0, $7d48db17c3f862ed$export$2e2bcd8739ae039)($65ed21acd2d13806$var$equalSign).event('click', ()=>$65ed21acd2d13806$var$calculatorState.equal());\nnew (0, $7d48db17c3f862ed$export$2e2bcd8739ae039)($65ed21acd2d13806$var$deleteDigit).event('click', ()=>$65ed21acd2d13806$var$calculatorState.delete());\nnew (0, $7d48db17c3f862ed$export$2e2bcd8739ae039)($65ed21acd2d13806$var$clearEntry).event('click', ()=>$65ed21acd2d13806$var$calculatorState.clear());\nnew (0, $7d48db17c3f862ed$export$2e2bcd8739ae039)($65ed21acd2d13806$var$allClearEntry).event('click', ()=>$65ed21acd2d13806$var$calculatorState.allClear());\nlet $65ed21acd2d13806$var$copying = false;\nconst $65ed21acd2d13806$var$showIcon = \"\\uF06E\";\nconst $65ed21acd2d13806$var$hideIcon = \"\\uF070\";\nnew (0, $7d48db17c3f862ed$export$2e2bcd8739ae039)($65ed21acd2d13806$var$hideAlternateNumbers).event('click', ()=>{\n    if ($65ed21acd2d13806$var$hideAlternateNumbers.textContent === $65ed21acd2d13806$var$showIcon) {\n        $65ed21acd2d13806$var$hideAlternateNumbers.textContent = $65ed21acd2d13806$var$hideIcon;\n        $65ed21acd2d13806$var$alternateNumbers.classList.add('hide-alternate-numbers');\n    } else {\n        $65ed21acd2d13806$var$hideAlternateNumbers.textContent = $65ed21acd2d13806$var$showIcon;\n        $65ed21acd2d13806$var$alternateNumbers.classList.remove('hide-alternate-numbers');\n    }\n});\nnew (0, $7d48db17c3f862ed$export$2e2bcd8739ae039)($65ed21acd2d13806$var$copyClipboard).event('click', ()=>{\n    const clipboardIcon = $65ed21acd2d13806$var$copyClipboard.textContent;\n    navigator.clipboard.writeText($65ed21acd2d13806$var$numberDisplayText.textContent);\n    $65ed21acd2d13806$var$copyClipboard.replaceChildren(\"\\uF00C\");\n    if (!$65ed21acd2d13806$var$copying) {\n        $65ed21acd2d13806$var$copying = true;\n        setTimeout(()=>{\n            $65ed21acd2d13806$var$copying = false;\n            $65ed21acd2d13806$var$copyClipboard.replaceChildren(clipboardIcon);\n        }, 1500);\n    }\n});\nconst $65ed21acd2d13806$var$toggleDisabledAttribute = (element)=>{\n    if (element.getAttribute('disabled') !== null) element.removeAttribute('disabled');\n    else element.setAttribute('disabled', '');\n};\nnew (0, $7d48db17c3f862ed$export$2e2bcd8739ae039)($65ed21acd2d13806$var$alternateNumbers).event('click', (e)=>{\n    event.target.class = 'alternate-number';\n    {\n        const numberIndex = Array.prototype.indexOf.call($65ed21acd2d13806$var$alternateNumbers.children, event.target);\n        $65ed21acd2d13806$var$UI.updateActiveAlternateNumber(numberIndex);\n        $65ed21acd2d13806$var$UI.updateAlternateNumbers($65ed21acd2d13806$var$calculator.publicNumberStack);\n        if ($65ed21acd2d13806$var$calculator.getEditMode() && numberIndex === 0) {\n            $65ed21acd2d13806$var$calculator.toggleEditMode();\n            $65ed21acd2d13806$var$toggleDisabledAttribute($65ed21acd2d13806$var$equalSign);\n            $65ed21acd2d13806$var$toggleDisabledAttribute($65ed21acd2d13806$var$allClearEntry);\n            $65ed21acd2d13806$var$calc.get().classList.toggle('edit-mode');\n        } else if (!$65ed21acd2d13806$var$calculator.getEditMode() && numberIndex !== 0) {\n            $65ed21acd2d13806$var$calculator.toggleEditMode();\n            $65ed21acd2d13806$var$toggleDisabledAttribute($65ed21acd2d13806$var$equalSign);\n            $65ed21acd2d13806$var$toggleDisabledAttribute($65ed21acd2d13806$var$allClearEntry);\n            $65ed21acd2d13806$var$calc.get().classList.toggle('edit-mode');\n        }\n        $65ed21acd2d13806$var$calculator.setEditIndex(numberIndex);\n        $65ed21acd2d13806$var$calculatorState.stdUpdateUI();\n    }\n});\n$65ed21acd2d13806$var$doc.event('keydown', (e)=>{\n    const keyResponse = (0, $af6a74ea1eba3e4b$export$2e2bcd8739ae039).processKey(e.key, e.shiftKey, e.ctrlKey);\n    keyResponse !== undefined && $65ed21acd2d13806$var$keyProcessor.process(keyResponse);\n});\nnew (0, $fba16cc1b8961a5a$export$2e2bcd8739ae039)($65ed21acd2d13806$var$numberDisplay, $65ed21acd2d13806$var$numberDisplayText, $65ed21acd2d13806$var$initNumberFontSize).start();\n\n\n//# sourceMappingURL=calculator.fbd45256.js.map\n","import keys from './keybindings.js';\nimport KeyProcessor from './keyprocessor.js';\nimport Calculator from './calculator.js';\nimport CalculatorProcessor from './calculatorProcessor.js';\nimport UiUpdater from './uiUpdater.js';\nimport LazyDoc from './lazyDocument.js';\nimport NumberScale from './numberDisplayScale.js';\nimport Templater from './templater.js';\n\nconst doc = new LazyDoc(document);\nconst calc = new LazyDoc(doc.node('#calculator'));\nconst numberDisplay = calc.node('#number-display');\nconst operatorDisplay = calc.node('#operator-display');\nconst alternateNumbers = calc.node('#alternate-numbers');\nconst numberDisplayText = new LazyDoc(numberDisplay).node('p');\nconst initNumberFontSize = window.getComputedStyle(numberDisplayText).fontSize.split('px')[0];\nconst calculator = new Calculator();\nconst UI = new UiUpdater(numberDisplayText, operatorDisplay, alternateNumbers, new Templater('div').addClass('alternate-number').node, keys.getKeyMap());\nconst calculatorState = new CalculatorProcessor(UI, calculator);\nconst numberElements = calc.nodes('[id^=\"num-\"].number');\nconst operatorElements = calc.nodes('[id^=\"oper-\"].operator');\nconst decimalSign = calc.node('#decimal-sign');\nconst equalSign = calc.node('#equal-sign');\nconst deleteDigit = calc.node('#delete-digit');\nconst clearEntry = calc.node('#clear-entry');\nconst allClearEntry = calc.node('#all-clear-entry');\nconst copyClipboard = calc.node('#copy-clipboard');\nconst hideAlternateNumbers = calc.node('#hide-alternate-numbers');\n\nconst digitMap = {\n  'num-1': '1',\n  'num-2': '2',\n  'num-3': '3',\n  'num-4': '4',\n  'num-5': '5',\n  'num-6': '6',\n  'num-7': '7',\n  'num-8': '8',\n  'num-9': '9',\n  'num-0': '0',\n}\n\nconst operatorMap = {\n  'oper-plus': '+',\n  'oper-minus': '-',\n  'oper-multiply': '*',\n  'oper-divide': '/',\n  'oper-sqrt': '√',\n}\n\nconst keyProcessor = new KeyProcessor(Object.values(digitMap), Object.values(operatorMap), calculatorState);\n\nnumberElements.forEach(number => {\n  new LazyDoc(number).event('click', () => calculatorState.number(digitMap[number.id]));\n});\n\noperatorElements.forEach(operator => {\n  new LazyDoc(operator).event('click', () => calculatorState.operator(operatorMap[operator.id]));\n});\n\nnew LazyDoc(decimalSign).event('click', () => calculatorState.decimal());\n\nnew LazyDoc(equalSign).event('click', () => calculatorState.equal());\n\nnew LazyDoc(deleteDigit).event('click', () => calculatorState.delete());\n\nnew LazyDoc(clearEntry).event('click', () => calculatorState.clear());\n\nnew LazyDoc(allClearEntry).event('click', () => calculatorState.allClear());\n\nlet copying = false;\nconst showIcon = '';\nconst hideIcon = '';\n\nnew LazyDoc(hideAlternateNumbers).event('click', () => {\n  if (hideAlternateNumbers.textContent === showIcon) {\n    hideAlternateNumbers.textContent = hideIcon;\n    alternateNumbers.classList.add('hide-alternate-numbers');\n  } else {\n    hideAlternateNumbers.textContent = showIcon;\n    alternateNumbers.classList.remove('hide-alternate-numbers');\n  }\n});\n\nnew LazyDoc(copyClipboard).event('click', () => {\n  const clipboardIcon = copyClipboard.textContent;\n  navigator.clipboard.writeText(numberDisplayText.textContent);\n  copyClipboard.replaceChildren('');\n\n  if (!copying) {\n    copying = true;\n\n    setTimeout(() => {\n      copying = false;\n      copyClipboard.replaceChildren(clipboardIcon);\n    }, 1500);\n  }\n});\n\nconst toggleDisabledAttribute = element => {\n  if (element.getAttribute('disabled') !== null) {\n    element.removeAttribute('disabled');\n  } else {\n    element.setAttribute('disabled', '');\n  }\n}\n\nnew LazyDoc(alternateNumbers).event('click', e => {\n  if (event.target.class = 'alternate-number') {\n    const numberIndex = Array.prototype.indexOf.call(alternateNumbers.children, event.target);\n    UI.updateActiveAlternateNumber(numberIndex);\n    UI.updateAlternateNumbers(calculator.publicNumberStack);\n\n    if (calculator.getEditMode()\n        && numberIndex === 0) {\n      calculator.toggleEditMode();\n      toggleDisabledAttribute(equalSign);\n      toggleDisabledAttribute(allClearEntry);\n      calc.get().classList.toggle('edit-mode');\n    } else if (!calculator.getEditMode()\n        && numberIndex !== 0) {\n      calculator.toggleEditMode();\n      toggleDisabledAttribute(equalSign);\n      toggleDisabledAttribute(allClearEntry);\n      calc.get().classList.toggle('edit-mode');\n    }\n\n    calculator.setEditIndex(numberIndex);\n    calculatorState.stdUpdateUI();\n  };\n});\n\ndoc.event('keydown', e => {\n  const keyResponse = keys.processKey(e.key, e.shiftKey, e.ctrlKey);\n\n  keyResponse !== undefined && keyProcessor.process(keyResponse);\n});\n\nnew NumberScale(numberDisplay, numberDisplayText, initNumberFontSize).start();\n","export default class Keybindings {\n  static #keys = new Map([\n    [[['0'], ['p']], '0'],\n    [[['1'], ['q']], '1'],\n    [[['2'], ['w']], '2'],\n    [[['3'], ['e']], '3'],\n    [[['4'], ['r']], '4'],\n    [[['5'], ['t']], '5'],\n    [[['6'], ['y']], '6'],\n    [[['7'], ['u']], '7'],\n    [[['8'], ['i']], '8'],\n    [[['9'], ['o']], '9'],\n    [[['.'], [',']], '.'],\n    [[['-'], ['m', 'shift']], '-'],\n    [[['√'], ['s', 'shift']], '√'],\n    [[['/'], ['/', 'shift'], ['d', 'shift']], '/'],\n    [[['+'], ['+', 'shift'], ['p', 'shift']], '+'],\n    [[['*'], ['*', 'shift'], ['t', 'shift']], '*'],\n    [[['='], ['e', 'shift'], ['enter']], '='],\n    [[['backspace'], ['x']], 'delete'],\n    [[['c', 'control']], 'clear'],\n    [[['escape']], 'allClear'],\n  ]);\n\n  static processKey(key, shift = false, control = false) {\n    for (const [keybindings, result] of Keybindings.#keys) {\n      for (const keybinding of keybindings) {\n\tif (keybinding.includes(key.toLowerCase())\n\t    && key !== 'Shift'\n\t    && key !== 'Control'\n\t    && shift === keybinding.includes('shift')\n\t    && control === keybinding.includes('control')\n\t) {\n\t  return result;\n\t}\n      }\n    }\n  }\n\n  static getKeyMap() {\n    return Keybindings.#keys;\n  }\n}\n","export default class KeyProcessor {\n  #digits;\n  #operators;\n  #calculatorState;\n\n  constructor(digits, operators, calculatorState) {\n    this.#digits = digits;\n    this.#operators = operators;\n    this.#calculatorState = calculatorState;\n  }\n\n  #handleUniqueResponse (response) {\n    switch (response) {\n      case '=':\n        this.#calculatorState.equal();\n        break;\n      case '.':\n        this.#calculatorState.decimal();\n        break;\n      case 'delete':\n        this.#calculatorState.delete();\n        break;\n      case 'clear':\n        this.#calculatorState.clear();\n        break;\n      case 'allClear':\n        this.#calculatorState.allClear();\n        break;\n      default:\n        throw new Error(`The ${response} is not a handled case!`);\n        break;\n    }\n  }\n\n  process(response) {\n    if (this.#digits.includes(response)) {\n      this.#calculatorState.number(response);\n    } else if (this.#operators.includes(response)) {\n      this.#calculatorState.operator(response);\n    } else {\n      this.#handleUniqueResponse(response);\n    }\n  }\n}\n","import MathEngine from '../../node_modules/dx-calc/dxCalc.js'\n\nexport default class Calculator {\n  #numberStack = [''];\n  #operatorStack = [];\n  #editMode = false;\n  #editIndex;\n\n  get publicNumberStack() {\n    return [...this.#numberStack];\n  }\n\n  get publicOperatorStack() {\n    return [...this.#operatorStack];\n  }\n\n  static #binaryOperations = {\n    '+': (x, y) => MathEngine.number(x).add(y).value,\n    '-': (x, y) => MathEngine.number(x).subtract(y).value,\n    '*': (x, y) => MathEngine.number(x).multiply(y).value,\n    '/': (x, y) => MathEngine.number(x).divide(y).value,\n  }\n\n  static #unaryOperations = {\n    '√': x => MathEngine.number(x).sqrt().value,\n    'negate': x => MathEngine.number(x).multiply('-1'),\n  }\n\n  static #isUnary(operator) {\n    return Calculator.#unaryOperations.hasOwnProperty(operator);\n  }\n\n  static #isBinary(operator) {\n    return Calculator.#binaryOperations.hasOwnProperty(operator);\n  }\n\n  toggleEditMode() {\n    this.#editMode ^= true;\n  }\n\n  getEditMode() {\n    return this.#editMode;\n  }\n\n  setEditIndex(index) {\n    this.#editIndex = this.#numberStack.length -1 -index;\n  }\n\n  clear() {\n    if (this.#editMode) {\n      this.#numberStack[this.#editIndex] = '';\n    } else {\n      this.#numberStack.pop();\n      this.#numberStack.push('');\n    }\n  }\n\n  allClear() {\n    if (!this.#editMode) {\n      this.#numberStack = [''];\n      this.#operatorStack = [];\n    }\n  }\n\n  deleteCharacter() {\n    if (this.currentNumber !== '') {\n      if (this.#editMode) {\n        this.#numberStack[this.#editIndex] = this.#numberStack[this.#editIndex].slice(0, -1);\n      } else {\n        this.#numberStack.push(this.#numberStack.pop().slice(0, -1));\n      }\n    } else if (this.currentOperator !== undefined) {\n      if (!this.#editMode) {\n        this.#operatorStack.pop();\n\n        if (this.previousNumber !== undefined) {\n          this.#numberStack.pop();\n        }\n      }\n    }\n  }\n\n  get currentOperator() {\n    if (this.#editMode) {\n      return this.#operatorStack[this.#editIndex];\n    }\n\n    return this.#operatorStack.at(-1);\n  }\n\n  get currentNumber() {\n    if (this.#editMode) {\n      return this.#numberStack[this.#editIndex];\n    }\n\n    return this.#numberStack.at(-1);\n  }\n\n  get previousNumber() {\n    if (this.#editMode) {\n      return this.#numberStack[this.#editIndex - 1];\n    } else {\n      return this.#numberStack.at(-2);\n    }\n  }\n\n  get previousOperator() {\n   return this.#operatorStack.at(-2);\n  }\n\n  conditionalAddDecimalSign() {\n    if (!this.currentNumber.includes('.')) {\n      if (this.#editMode) {\n        this.#numberStack[this.#editIndex] += '.';\n      } else {\n        this.#numberStack.push(this.#numberStack.pop().concat('.'));\n      }\n    }\n  }\n\n  addNumber(stringNumber) {\n    if (this.#editMode) {\n      this.#numberStack[this.#editIndex] = this.#numberStack[this.#editIndex] + stringNumber;\n    } else {\n      const lastNumber = this.#numberStack.pop();\n      const newNumber = lastNumber + stringNumber;\n      this.#numberStack.push(newNumber);\n    }\n  }\n\n  addOperator(newOperator) {\n    let sameGroup = false;\n\n    switch (this.#canAddOperator(newOperator)) {\n      case true:\n        this.#operatorStack.push(newOperator);\n        break;\n      case false:\n        // ignore, don't add / do anything\n        break;\n      case 'negate':\n        if (this.currentNumber !== '-') {\n          this.#numberStack.pop();\n          this.#numberStack.push('-');\n        }\n\n        break;\n      case 'sameGroup':\n        sameGroup = true;\n        this.#operatorStack.pop();\n        this.#operatorStack.push(newOperator);\n        break;\n      case 'editMode':\n        sameGroup = true;\n        this.#operatorStack[this.#editIndex] = newOperator;\n        return;\n    }\n\n    if (Calculator.#isUnary(this.currentOperator)\n        && this.currentNumber !== '') {\n      this.#makeCalculation();\n      let tempCurrentOperator = this.#operatorStack.pop();\n\n      this.#operatorStack.push('*');\n      this.#operatorStack.push(tempCurrentOperator);\n      this.#breakNumber();\n\n      tempCurrentOperator = null;\n    }\n\n    if (this.previousOperator !== undefined) {\n      this.#makeCalculation();\n    }\n\n    if (!Calculator.#isUnary(this.currentOperator)\n        && !sameGroup\n        && this.#numberStack[0] !== '-'\n        && this.currentOperator !== '=') {\n      this.#breakNumber();\n    }\n\n    if (this.currentOperator === '=') {\n      this.#operatorStack.pop();\n    }\n  }\n\n  calculate() {\n    if (!this.#editMode) {\n      this.#operatorStack.push('non-existant operator');\n      this.#makeCalculation();\n      this.#operatorStack.pop();\n    }\n  }\n\n  #canAddOperator(newOperator) {\n    const currentOperatorSameGroup = Calculator.#isUnary(this.currentOperator) && Calculator.#isUnary(newOperator) || Calculator.#isBinary(this.currentOperator) && Calculator.#isBinary(newOperator);\n\n    if (this.#editMode) {\n      return 'editMode';\n    }\n\n    if (newOperator === '-'\n        && this.#numberStack.length === 1\n        && this.#numberStack[0] === ''\n        || this.#numberStack[0] === '-') {\n      return 'negate';\n    }\n\n    if (this.currentNumber === '') {\n      if (currentOperatorSameGroup) {\n        return 'sameGroup';\n      } else if (Calculator.#isUnary(newOperator)) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  #breakNumber() {\n    this.#numberStack.push('');\n  }\n\n  #pushCalculation(result) {\n    this.#numberStack.push(result);\n    this.#operatorStack.splice(-2, 1);\n  }\n\n  #unaryCalculate(operator) {\n    const poppedNumber = this.#numberStack.pop();\n    const calculation = Calculator.#unaryOperations[operator];\n    const result = calculation(poppedNumber);\n    this.#pushCalculation(result);\n  }\n\n  #binaryCalculate (operator) {\n    const poppedNumbers = this.#numberStack.splice(-2, 2);\n    const calculation = Calculator.#binaryOperations[operator];\n    const result = calculation(...poppedNumbers);\n    this.#pushCalculation(result);\n  }\n\n  #makeCalculation() {\n    if (Calculator.#isUnary(this.previousOperator)) {\n        this.#unaryCalculate(this.previousOperator);\n    } else if (!Calculator.#isUnary(this.currentOperator)\n        && Calculator.#isBinary(this.previousOperator)) {\n        this.#binaryCalculate(this.previousOperator);\n    }\n\n    if (this.#operatorStack.length > 1 && !Calculator.#isUnary(this.currentOperator)) {\n      this.#makeCalculation();\n    }\n  }\n}\n","export default class DXCalc {\n  #_isNegative;\n  #_digits;\n  #_integer = {};\n  #_decimal = {};\n  static #_scale;\n  static #_token;\n\n  constructor(number, token = undefined) {\n    if (token !== DXCalc.#_token) DXCalc.#callError('newDXCalcCalled');\n\n    const numberString = DXCalc.#normalize(number);\n\n    this.#decomposeNumber(numberString);\n  }\n\n  get digits() {\n    return this.#_digits;\n  }\n\n  get isNegative() {\n    return this.#_isNegative;\n  }\n\n  get integer() {\n    return this.#_integer;\n  }\n\n  get sciNum() {\n    return DXCalc.#enScientify(this.value);\n  }\n\n  get decimal() {\n    return this.#_decimal;\n  }\n\n  get value() {\n    return DXCalc.#formatToDecimal(this.#_digits.toString(), this.#_decimal?.length);\n  }\n\n  add(secondNumber) {\n    if (secondNumber instanceof DXCalc === false) secondNumber = DXCalc.number(secondNumber);\n\n    const maxDecimalLength = Math.max(this.#_decimal?.length ?? 0, secondNumber.#_decimal?.length ?? 0);\n    const firstNumberValue = this.#rescaleDecimal(maxDecimalLength);\n    const secondNumberValue = secondNumber.#rescaleDecimal(maxDecimalLength);\n    const numberResult = firstNumberValue + secondNumberValue;\n\n    return DXCalc.number(DXCalc.#formatToDecimal(numberResult, maxDecimalLength));\n  }\n\n  subtract(secondNumber) {\n    if (secondNumber instanceof DXCalc === false) secondNumber = DXCalc.number(secondNumber);\n\n    secondNumber.#_digits *= -1n; // invert sign\n    secondNumber.#_isNegative ^= true; // toggle true | false\n\n    return this.add(secondNumber);\n  }\n\n  multiply(secondNumber) {\n    if (secondNumber instanceof DXCalc === false) secondNumber = DXCalc.number(secondNumber);\n\n    const sumLength = (this.#_decimal?.length ?? 0) + (secondNumber.#_decimal?.length ?? 0);\n    const numberResult = this.#_digits * secondNumber.#_digits;\n\n    return DXCalc.number(DXCalc.#formatToDecimal(numberResult, sumLength));\n  }\n\n  divide(secondNumber) {\n    if (secondNumber instanceof DXCalc === false) secondNumber = DXCalc.number(secondNumber);\n    const maxDecimalLength = Math.max(this.#_decimal?.length ?? 0, secondNumber.#_decimal?.length ?? 0);\n    const divident = this.#rescaleDecimal(maxDecimalLength);\n    const divisor = secondNumber.#rescaleDecimal(maxDecimalLength);\n\n    if (divisor === 0n) return DXCalc.#callError('divideZero');\n\n    const adjustDividentForDivision = (divident, divisor, iterations = 0) => {\n      if (iterations <= DXCalc.#_scale && divident % divisor !== 0n) {\n        const newDivident = divident * 10n;\n        iterations++; // THIS DOESN'T WORK\n        return adjustDividentForDivision(newDivident, divisor, iterations);\n      } else {\n        return [divident, iterations];\n      }\n    }\n\n    DXCalc.#_scale++;\n    const [adjustedDivident, addedDecimals] = adjustDividentForDivision(divident, divisor);\n    DXCalc.#_scale--;\n    const quotient = (adjustedDivident / divisor).toString();\n    const formattedQuotient = DXCalc.#formatToDecimal(quotient, addedDecimals);\n    const DXCalcResult = DXCalc.number(formattedQuotient);\n\n    return DXCalcResult;\n  }\n\n  sqrt() {\n    if (this.#_isNegative) DXCalc.#callError('negativeForbidden', this.value);\n    const sqrt = DXCalc.#newtonsMethodSqrt(this);\n\n    return DXCalc.number(sqrt.value.slice(0, DXCalc.#_scale + 1 + sqrt.#_integer.length));\n  }\n\n  static get scale() {\n    return DXCalc.#_scale;\n  }\n\n  static number(input) {\n    if (input instanceof DXCalc) {\n      return input;\n    }\n\n\n    const validatedInput = DXCalc.#validate(input);\n\n    return new DXCalc(validatedInput, DXCalc.#_token);\n  }\n\n  static {\n    DXCalc.#_scale = 9;\n    DXCalc.#_token = Symbol('unique identifier');\n    // aliases\n    DXCalc.from = DXCalc.number;\n    DXCalc.prototype.times = DXCalc.prototype.multiply;\n    DXCalc.prototype.plus = DXCalc.prototype.add;\n    DXCalc.prototype.minus = DXCalc.prototype.subtract;\n    DXCalc.prototype.div = DXCalc.prototype.divide;\n  }\n\n  static setScale = scale => {\n    if (typeof scale === 'number') {\n      DXCalc.#validate(scale, 'scale');\n\n      if (scale > 0) DXCalc.#_scale = scale;\n      else DXCalc.#callError('numNeedMoreThanZero');\n    } else {\n      DXCalc.#callError('unsupportedType', scale);\n    }\n\n    return DXCalc;\n  }\n\n  static longScale() {\n    DXCalc.setScale(20);\n    return DXCalc;\n  }\n\n  #rescaleDecimal(scale) {\n    const decimalsNeeded = scale - (this?.#_decimal?.length || 0);\n\n    if (decimalsNeeded < 0) return this.#_digits / 10n ** -BigInt(decimalsNeeded);\n\n    return this.#_digits * 10n ** BigInt(decimalsNeeded);\n  }\n\n  static #validate(number, mode = 'default') {\n    switch (typeof number) {\n      case 'string':\n        break;\n      case 'number':\n        if (mode !== 'scale') DXCalc.#warning('inputNumber');\n        number = number.toString();\n        break;\n      case 'bigint':\n        number = number.toString();\n        break;\n      default:\n        return DXCalc.#callError('unsupportedType', number);\n    }\n\n    number = number.trim();\n\n    const validNumberRegex = (\n      mode === 'scale'\n      ? /^[+-]?(\\d+)$/\n      : /^[+-]?(\\d+(\\.\\d*)?|\\.\\d+)([eE][+-]?\\d+)?$/\n    );\n\n    if (!validNumberRegex.test(number)) return DXCalc.#callError('badNum', number);\n\n    switch (mode) {\n      case 'default':\n        return number;\n      case 'scale':\n        return +number;\n      default:\n        DXCalc.#callError('unsupportedValidateMode');\n    }\n  }\n\n  static #callError(error = 'default', info = undefined) {\n    switch (error) {\n      case 'numNeedMoreThanZero':\n        throw new Error('\\nThe number ${info} is invalid!\\nMust be more than zero');\n      case 'newDXCalcCalled':\n        throw new Error('\\nDXCalc constructor cannot be called directly.\\nUse DXCalc.number() instead.');\n      case 'unsupportedValidateMode':\n        throw new Error (`\\nUnsupported validate mode <${info}>!\\nPlease refer to the documentation.`);\n      case 'unsupportedType':\n        throw new Error (`\\nUnsupported type <${typeof info}>!\\nPlease refer to the documentation.`);\n      case 'badNum':\n        if (info === '') info = 'empty string';\n\n        throw new Error (`\\nIncorrect number: <${info}> is not a valid number!`);\n      case 'badScale':\n        throw new Error (`\\nCannot have less than 0 decimals: <${info}>!`);\n      case 'divideZero':\n        throw new Error ('\\nCannot divide by zero!');\n      case 'negSqrt':\n        throw new Error ('\\nSquare root of a negative number is imaginary!');\n      case 'negativeForbidden':\n        throw new Error (`\\nNumber <${info}> not in range: only positive numbers allowed!`);\n      case 'default':\n        throw new Error (\"\\nFatal error, that's all we know...\");\n    }\n  }\n\n  static #warning(warning = 'default', info = undefined) {\n    switch (warning) {\n      case 'inputNumber':\n        console.warn(\"Don't use number type: Prefer string or bigint input for higher precision and avoiding bugs\");\n        break;\n      default:\n        console.warn(\"This is a warning, that's all we know...\");\n    }\n  }\n\n  static #normalize = number => {\n    const numberString = number.toString();\n    const descientifiedNumber = (\n      numberString.includes('e') || numberString.includes('E')\n        ? DXCalc.#deScientify(numberString)\n        : numberString\n    );\n    const scaledNumber = DXCalc.#trimNumberToScale(descientifiedNumber);\n    const trimmedNumber = DXCalc.#trimZeroes(scaledNumber);\n\n    return trimmedNumber;\n  }\n\n  static #formatToDecimal(digits, decimals) {\n    const digitsString = digits.toString();\n    const sign = digitsString[0] === '-' ? '-' : '';\n    const pureDigitsString = digitsString.slice(sign.length);\n    const digitsLength = pureDigitsString.length;\n\n\n    const getResult = () => {\n      const originalNumber = sign + pureDigitsString;\n      if (decimals === 0 || decimals === undefined) {\n        return originalNumber;\n      } else if (decimals < 0) {\n        return sign + pureDigitsString + '0'.repeat(-decimals);\n      } else if (digitsLength > decimals) {\n        return sign + pureDigitsString.slice(0, digitsLength - decimals) + '.' + pureDigitsString.slice(digitsLength - decimals);\n      } else {\n        return sign + '0.' + '0'.repeat(decimals - digitsLength) + pureDigitsString;\n      }\n    }\n\n    const result = getResult();\n\n    return DXCalc.#trimZeroes(result);\n  }\n\n  static #trimZeroes = numberString => {\n    const dotIndex = numberString.indexOf('.');\n    const sign = (numberString[0] === '-' ? '-' : '');\n    numberString = numberString.replace('-', '').replace(/^0+/g, '');\n\n    if (numberString.includes('.')) {\n      numberString = numberString.replace(/0+$/g, '');\n\n      if (numberString.at(-1) === '.') numberString = numberString.slice(0, -1);\n      if (numberString.at(0) === '.') numberString = '0' + numberString;\n    }\n\n    const [mantissa, decimal] = numberString.split('.');\n\n    if (mantissa === '' && decimal !== undefined) {\n      numberString = '0.' + decimal;\n    }\n\n    return numberString === '' ? '0' : sign + numberString;\n  }\n\n  static #deScientify = str => {\n    const [mantissa, exponent = '0'] = str.split('e');\n    const [integer, decimal] = mantissa.split('.');\n    const negativeExponent = exponent[0] === '-';\n    const exponentValue = +(negativeExponent ? exponent.slice(1) : exponent);\n\n    if (negativeExponent) {\n      return DXCalc.#formatToDecimal(integer + (decimal ?? ''), exponentValue + (decimal?.length ?? 0));\n    } else {\n      return DXCalc.#formatToDecimal(integer + (decimal ?? ''), (decimal?.length ?? 0) - exponentValue);\n    }\n  }\n\n  static #enScientify(stringNumber) {\n    const validatedNumber = DXCalc.#validate(stringNumber);\n    const realStringNumber = DXCalc.#trimZeroes(stringNumber);\n\n    const getDescientifiedNumber = () => {\n      if (validatedNumber.includes('e')\n          || validatedNumber.includes('E')) {\n        return DXCalc.#deScientify(realStringNumber);\n      } else {\n        return realStringNumber;\n      }\n    }\n\n    const descientifiedNumber = getDescientifiedNumber();\n    const [integer, decimal = ''] = descientifiedNumber.split('.');\n    const sign = integer[0] === '-' ? '-' : '';\n    const pureDigits = DXCalc.#trimZeroes((integer + decimal).slice(sign.length));\n\n    const calculateMantissa = () => {\n      const mantissaHasDecimal = pureDigits.length > 1;\n      const mantissaWithDecimal = pureDigits[0] + '.' + pureDigits.slice(1);\n\n      if (mantissaHasDecimal) {\n        return sign + mantissaWithDecimal;\n      } else {\n        return sign + integer;\n      }\n    }\n\n    const mantissa = calculateMantissa();\n    const decimalPoint = descientifiedNumber.includes('.') ? '.' : '';\n    const [mantissaInteger, mantissaDecimal] = mantissa.split('.');\n\n    const calculateExponentValue = () => {\n      const exponentIsPositive = pureDigits.length + sign.length === descientifiedNumber.length - decimalPoint.length;\n      const positiveExponentValue = integer.length - mantissaInteger.length;\n      const negativeExponentValue = pureDigits.length - descientifiedNumber.length + decimalPoint.length + sign.length;\n\n      if (exponentIsPositive) {\n        return positiveExponentValue;\n      } else {\n        return negativeExponentValue;\n      }\n    }\n\n    const exponentValue = calculateExponentValue();\n    const exponentString = exponentValue === 0 ? '' : 'e' + exponentValue;\n\n    return(mantissa + exponentString);\n  }\n\n  static #roundLastDecimal(str) {\n    const validatedString = DXCalc.#validate(str);\n    const sign = validatedString[0] === '-' ? '-' : '';\n    let absoluteDigits = BigInt(validatedString.replace(/^-|\\./g, ''));\n    const decimalLength = validatedString.split('.')[1]?.length ?? 0;\n\n    if (absoluteDigits % 10n >= 5n) absoluteDigits += 10n;\n\n    absoluteDigits -= absoluteDigits % 10n;\n    absoluteDigits /= 10n;\n\n    return DXCalc.#formatToDecimal(sign + absoluteDigits.toString(), Math.min(DXCalc.#_scale, decimalLength));\n  }\n\n  static #trimNumberToScale(str) {\n    const validatedString = DXCalc.#validate(str);\n    let [integer, decimal] = validatedString.split('.');\n    const sign = validatedString[0] === '-' ? '-' : '';\n\n    if (decimal === undefined || decimal.length <= DXCalc.#_scale) return validatedString;\n\n    decimal = decimal.slice(0, DXCalc.#_scale + 1);\n    return DXCalc.#roundLastDecimal(integer + '.' + decimal);\n  }\n\n  static #newtonsMethodSqrt(number) {\n    if (number.#_digits === 0n) return number;\n    // temporary increase for precision\n    DXCalc.#_scale++;\n    // safeguard\n    const maxIterations = 100;\n\n    // newtons Method\n    const newGuess = currentGuess => currentGuess.add(number.divide(currentGuess)).divide('2');\n\n    // initial guess for newtons method\n    let currentGuess = DXCalc.number('1');\n\n    for (let i = 0; i < maxIterations; i++) {\n      const nextGuess = newGuess(currentGuess);\n      const difference = currentGuess.subtract(nextGuess);\n      const perfectPrecision = difference.#_digits === 0n;\n      const hasEnoughPrecision = difference.#_decimal?.startsWith('0'.repeat(this.#_scale - 1)) ?? false;\n\n      if (perfectPrecision || hasEnoughPrecision) break;\n      else currentGuess = newGuess(currentGuess);\n    }\n\n    DXCalc.#_scale--;\n\n    // automatically scales the decimal of guess down\n    currentGuess = DXCalc.number(currentGuess.value);\n\n    return currentGuess;\n  }\n\n  #decomposeNumber(str) {\n    this.#_isNegative = str[0] === '-';\n    this.#_digits = BigInt(str.replace(/\\./g, ''));\n    [this.#_integer, this.#_decimal] = str.split('.');\n\n    if (this.#_isNegative) this.#_integer = this.#_integer.slice(1);\n  }\n}\n","export default class CalculatorProcessor {\n  #UI;\n  #calculator;\n\n  constructor(UI, calculator) {\n    this.#UI = UI;\n    this.#calculator = calculator;\n  }\n\n  stdUpdateUI() {\n    this.#UI.updateNumber(this.#calculator.currentNumber ?? '');\n    this.#UI.updateOperator(this.#calculator.currentOperator ?? '');\n    this.#UI.updateAlternateNumbers(this.#calculator.publicNumberStack);\n  }\n\n  number(number) {\n    this.#calculator.addNumber(number);\n    this.#UI.updateNumber(this.#calculator.currentNumber);\n    this.#UI.updateAlternateNumbers(this.#calculator.publicNumberStack);\n  }\n\n  operator(operator) {\n    this.#calculator.addOperator(operator);\n    this.#UI.updateNumber(this.#calculator.previousNumber ?? this.#calculator.currentNumber);\n    this.#UI.updateOperator(this.#calculator.currentOperator);\n    this.#UI.updateAlternateNumbers(this.#calculator.publicNumberStack);\n  }\n\n  decimal() {\n    this.#calculator.conditionalAddDecimalSign();\n    this.#UI.updateNumber(this.#calculator.currentNumber);\n    this.#UI.updateAlternateNumbers(this.#calculator.publicNumberStack);\n  }\n\n  equal() {\n    this.#calculator.calculate();\n    this.stdUpdateUI()\n    this.#UI.updateActiveAlternateNumber();\n  }\n\n  delete() {\n    this.#calculator.deleteCharacter();\n    this.stdUpdateUI()\n  }\n\n  clear() {\n    this.#calculator.clear();\n    this.#UI.updateNumber(this.#calculator.currentNumber);\n    this.#UI.updateAlternateNumbers(this.#calculator.publicNumberStack);\n  }\n\n  allClear() {\n    this.#calculator.allClear();\n    this.stdUpdateUI();\n  }\n\n}\n","import Doc from './lazyDocument.js';\n\nexport default class UiUpdater {\n  #numberElement;\n  #operatorElement;\n  #alternateNumbers;\n  #alternateNumbersSelector\n  #alternateNumberTemplate;\n  #activeAlternateNumber;\n  #keymap;\n  #operatorMap = {\n    '/': '÷',\n    '*': '×',\n  };\n\n  constructor(numberElement, operatorElement, alternateNumbers, alternateNumberTemplate, keymap) {\n    this.#numberElement = numberElement;\n    this.#operatorElement = operatorElement;\n    this.#alternateNumbers = alternateNumbers;\n    this.#alternateNumberTemplate = alternateNumberTemplate.cloneNode(true);\n    this.#keymap = keymap;\n\n    this.#alternateNumbersSelector = new Doc(this.#alternateNumbers);\n    alternateNumberTemplate.remove();\n  }\n\n  makeAlternateNumber(number = '', active = false) {\n    const newNumber = this.#alternateNumberTemplate.cloneNode(true);\n    newNumber.textContent = number.toString();\n    if (active) newNumber.classList.add('active');\n\n    return newNumber;\n  }\n\n  updateActiveAlternateNumber(number = 0) {\n    this.#activeAlternateNumber = number;\n  }\n\n  updateAlternateNumbers(numbersArray) {\n    const alternateNumbers = numbersArray.filter(number => number !== '').map(number => this.makeAlternateNumber(number));\n\n    if (alternateNumbers.length > 1) {\n      alternateNumbers.reverse();\n      alternateNumbers[this.#activeAlternateNumber ?? 0].classList.add('active');\n      this.#alternateNumbers.replaceChildren(...alternateNumbers);\n    } else {\n      this.#alternateNumbers.replaceChildren();\n    }\n  }\n\n  updateNumber(number) {\n      this.#numberElement.textContent = number === '' ? '__' : number;\n  }\n\n  updateOperator(operator) {\n    if (operator in this.#operatorMap) {\n      this.#operatorElement.textContent = this.#operatorMap[operator];\n    } else {\n      this.#operatorElement.textContent = operator;\n    }\n  }\n\n  static addNewChild(parentNode, newNode) {\n    parentNode.appendChild(newNode);\n  }\n}\n","export default class LazyDocument {\n  #node;\n\n  constructor(node) {\n    this.#node = node;\n  }\n\n  node(selector) {\n    return this.#node.querySelector(selector);\n  }\n\n  nodes(selector) {\n    return this.#node.querySelectorAll(selector);\n  }\n\n  nodesArray() {\n    return Array.from(this.#node.querySelectorAll(selector));\n  }\n\n  event(event, callable) {\n    return this.#node.addEventListener(event, callable);\n  }\n\n  get() {\n    return this.#node;\n  }\n}\n","export default class NumberDisplayScale {\n  #numberDisplay;\n  #numberDisplayText;\n  #initFontSize;\n\n  constructor(numberElement, numberTextElement, fontSize) {\n    this.#numberDisplay = numberElement;\n    this.#numberDisplayText = numberTextElement;\n    this.#initFontSize = fontSize;\n  }\n\n  #clamp(number, min, max) {\n    return Math.max(min, Math.min(number, max));\n  }\n\n  #handleFontSize() {\n    const scale = this.#numberDisplay.clientWidth / this.#numberDisplayText.clientWidth;\n    const fontSize = this.#numberDisplayText.style.fontSize?.split('px')[0] || this.#initFontSize;\n    const newFontSize = this.#clamp(fontSize * scale, +this.#initFontSize / 3, +this.#initFontSize);\n    this.#numberDisplayText.style.fontSize = newFontSize + 'px';\n  }\n\n  start() {\n    new ResizeObserver(() => {\n      this.#handleFontSize();\n    }).observe(this.#numberDisplayText);\n  }\n}\n","export default class Templater {\n  get node() {\n    return this.element;\n  }\n\n  constructor(element) {\n    this.element = document.createElement(element);\n  }\n\n  addClass(newClass) {\n    this.element.classList.add(newClass);\n    return this;\n  }\n\n  removeClass(oldClass) {\n    this.element.classList.remove(oldClass);\n    return this;\n  }\n\n  addText(text) {\n    this.element.textContent = text;\n    return this;\n  }\n\n  addChild(node) {\n    this.element.appendChild(node);\n    return this;\n  }\n}\n"],"names":["$af6a74ea1eba3e4b$export$2e2bcd8739ae039","Map","processKey","key","shift","control","keybindings","result","keybinding","includes","toLowerCase","getKeyMap","$64c96a00cf577fd3$export$2e2bcd8739ae039","number","token","numberString","digits","isNegative","integer","sciNum","value","decimal","toString","length","add","secondNumber","maxDecimalLength","Math","max","firstNumberValue","secondNumberValue","subtract","multiply","sumLength","numberResult","divide","divident","divisor","adjustDividentForDivision","iterations","adjustedDivident","addedDecimals","quotient","formattedQuotient","sqrt","slice","scale","input","validatedInput","Symbol","from","prototype","times","plus","minus","div","setScale","longScale","decimalsNeeded","BigInt","mode","trim","validNumberRegex","test","error","info","Error","warning","console","warn","descientifiedNumber","scaledNumber","decimals","digitsString","sign","pureDigitsString","digitsLength","getResult","originalNumber","undefined","repeat","indexOf","replace","at","mantissa","split","str","exponent","negativeExponent","exponentValue","stringNumber","validatedNumber","realStringNumber","pureDigits","calculateMantissa","mantissaHasDecimal","mantissaWithDecimal","decimalPoint","mantissaInteger","mantissaDecimal","calculateExponentValue","exponentIsPositive","positiveExponentValue","negativeExponentValue","validatedString","absoluteDigits","decimalLength","min","newGuess","currentGuess","i","nextGuess","difference","perfectPrecision","hasEnoughPrecision","startsWith","$ef2afadab83ce56d$export$2e2bcd8739ae039","publicNumberStack","publicOperatorStack","x","y","operator","hasOwnProperty","toggleEditMode","getEditMode","setEditIndex","index","clear","pop","push","allClear","deleteCharacter","currentNumber","currentOperator","previousNumber","previousOperator","conditionalAddDecimalSign","concat","addNumber","lastNumber","addOperator","newOperator","sameGroup","tempCurrentOperator","calculate","currentOperatorSameGroup","splice","poppedNumber","calculation","poppedNumbers","$7d48db17c3f862ed$export$2e2bcd8739ae039","node","selector1","querySelector","nodes","querySelectorAll","nodesArray","Array","selector","event","callable","addEventListener","get","$65ed21acd2d13806$var$doc","document","$65ed21acd2d13806$var$calc","$65ed21acd2d13806$var$numberDisplay","$65ed21acd2d13806$var$operatorDisplay","$65ed21acd2d13806$var$alternateNumbers","$65ed21acd2d13806$var$numberDisplayText","$65ed21acd2d13806$var$initNumberFontSize","window","getComputedStyle","fontSize","$65ed21acd2d13806$var$calculator","$65ed21acd2d13806$var$UI","numberElement","operatorElement","alternateNumbers","alternateNumberTemplate","keymap","cloneNode","remove","makeAlternateNumber","active","newNumber","textContent","classList","updateActiveAlternateNumber","updateAlternateNumbers","numbersArray","filter","map","reverse","replaceChildren","updateNumber","updateOperator","addNewChild","parentNode","newNode","appendChild","element","createElement","addClass","newClass","removeClass","oldClass","addText","text","addChild","$65ed21acd2d13806$var$calculatorState","UI","calculator","stdUpdateUI","equal","delete","$65ed21acd2d13806$var$numberElements","$65ed21acd2d13806$var$operatorElements","$65ed21acd2d13806$var$decimalSign","$65ed21acd2d13806$var$equalSign","$65ed21acd2d13806$var$deleteDigit","$65ed21acd2d13806$var$clearEntry","$65ed21acd2d13806$var$allClearEntry","$65ed21acd2d13806$var$copyClipboard","$65ed21acd2d13806$var$hideAlternateNumbers","$65ed21acd2d13806$var$digitMap","$65ed21acd2d13806$var$operatorMap","$65ed21acd2d13806$var$keyProcessor","operators","calculatorState","response","process","Object","values","forEach","id","$65ed21acd2d13806$var$copying","clipboardIcon","navigator","clipboard","writeText","setTimeout","$65ed21acd2d13806$var$toggleDisabledAttribute","getAttribute","removeAttribute","setAttribute","e","target","class","numberIndex","call","children","toggle","keyResponse","shiftKey","ctrlKey","numberTextElement","clientWidth","style","newFontSize","start","ResizeObserver","observe"],"version":3,"file":"calculator.fbd45256.js.map"}