import Decimal from"./decimal.js";const resultElement=document.querySelector("#result");const calculator={number1:"",operator:undefined,number2:"",decimalSignAdded:false,result:"",pressedZeroInt:false,validate:function(){return Number.isFinite(+this.number1)&&Number.isFinite(+this.number2)},error:function(){this.reset();resultElement.textContent="ERROR"},decimalMaxLen:function(decimal1,decimal2){return Math.max(decimal1.decimalLen,decimal2.decimalLen)},decimalSumLen:function(decimal1,decimal2){return decimal1.decimalLen+decimal2.decimalLen},add:function(num1=this.number1,num2=this.number2){const decimal1=new Decimal(num1);const decimal2=new Decimal(num2);const maxLen=this.decimalMaxLen(decimal1,decimal2);decimal1.growToSizeDecimal(maxLen);decimal2.growToSizeDecimal(maxLen);return(+decimal1.customLenNumber+ +decimal2.customLenNumber)/10**maxLen},subtract:function(num1=this.number1,num2=this.number2){return this.add(num1,-num2)},multiply:function(num1=this.number1,num2=this.number2){const decimal1=new Decimal(num1);const decimal2=new Decimal(num2);const maxLen=this.decimalMaxLen(decimal1,decimal2);const sumLen=this.decimalSumLen(decimal1,decimal2);return+decimal1.customLenNumber*+decimal2.customLenNumber/10**sumLen},divide:function(num1=this.number1,num2=this.number2){if(num2===0)return this.error();const decimal1=new Decimal(num1);const decimal2=new Decimal(num2);const maxLen=this.decimalMaxLen(decimal1,decimal2);console.log(decimal1,decimal2);return decimal1.moveDecimalToRight(maxLen)/decimal2.moveDecimalToRight(maxLen)},exponent:function(number,power){if(power===0)return 1;let value=number;for(let i=1;i<Math.abs(power);i++){value*=number}if(power<0)return 1/value;return value},calculate:function(){if(!this.validate())return this.error();if(this.number2==="0"&&this.operator==="/"){this.reset();this.result="Cannot divide through 0"}else if(this.number2!==""){switch(this.operator){case"+":this.result=this.add();break;case"-":this.result=this.subtract();break;case"*":this.result=this.multiply();break;case"/":this.result=this.divide();break}this.number1=this.result}else{this.result=this.number1}this.number2="";this.operator=undefined;resultElement.textContent=this.result;if(this.result.toString().indexOf(".")!==-1)this.decimalSignAdded=true;this.result=""},addNumber:function(number){if(number==="."){if(this.operator===undefined)this.number1+=".";else this.number2+=".";this.decimalSignAdded=true}else if(this.operator===undefined){if(this.number1===""&&number==="-"){this.number1+=number;this.updateUI(this.number1)}else{this.number1+=number.toString();if(!this.decimalSignAdded)this.number1=(+this.number1).toString();this.updateUI(this.number1)}}else{this.number2+=number.toString();if(!this.decimalSignAdded)this.number2=(+this.number2).toString();this.updateUI(this.number2)}},addDecimalSign:function(){if(!this.decimalSignAdded){this.addNumber(".");this.decimalSignAdded=true;this.operator===undefined?this.updateUI(this.number1):this.updateUI(this.number2)}},addOperator:function(operatorID){this.decimalSignAdded=false;this.pressedZeroInt=false;switch(operatorID){case"oper-plus":this.operator="+";break;case"oper-minus":this.operator="-";break;case"oper-multiply":this.operator="*";break;case"oper-divide":this.operator="/";break}},deleteLastDigit:function(){if(this.number1!==""){if(this.operator===undefined){if(this.number1.toString().at(-1)===".")this.decimalSignAdded=false;this.number1=this.number1.toString().substring(0,this.number1.length-1);this.updateUI(this.number1)}else{if(this.number2.toString().at(-1)===".")this.decimalSignAdded=false;this.number2=this.number2.toString().substring(0,this.number2.length-1);this.updateUI(this.number2)}}},clearAll:function(){},reset:function(){this.number1="",this.number2="",this.result="",this.operator=undefined;this.decimalSignAdded=false;this.updateUI(0)},history:{},updateUI:function(element){resultElement.textContent=element}};export default calculator;class Decimal{constructor(value){this.number=+value;this.numberString=this.number.toString();this.decimalIndex=this.numberString.indexOf(".");if(this.decimalIndex!==-1)this.decimalLen=this.numberString.split(".")[1].toString().length;else this.decimalLen=0;this.numNoDecimal=this.number.toString().replace(".","");this.numNoDecimalLen=this.numNoDecimal.length;this.customLenNumber=this.numNoDecimal}growToSizeDecimal(value){this.addedEndZeroes=value-this.decimalLen;if(this.addedEndZeroes===0)this.customLenNumber;else if(this.addedEndZeroes>0)this.customLenNumber=(this.numNoDecimal.toString()+"0".repeat(this.addedEndZeroes)).toString();else{console.error(`Error: Impossible state - endZeroesNeeded cannot be less than zero (${this.addedEndZeroes}).`);throw new Error("Invalid calculation result: 'endZeroesNeeded' is negative.")}}moveDecimalToRight(places){const someCalculationIdk=this.decimalLen-places;this.customLenNumber=this.customLenNumber.replace(".","");if(places<0){return this.moveDecimalToLeft(-places)}else if(someCalculationIdk>0){this.decimalLen=someCalculationIdk;return this.customLenNumber=this.moveDecimalToLeft(someCalculationIdk)}else{this.decimalLen=0;if(someCalculationIdk<0)this.customLenNumber=this.customLenNumber+"0".repeat(-someCalculationIdk);if(someCalculationIdk===0)this.customLenNumber;return this.customLenNumber=(+this.customLenNumber).toString()}}moveDecimalToLeft(places){this.customLenNumber=this.customLenNumber.replace(".","");if(places<0){return this.moveDecimalToRight(-places)}else if(places<this.customLenNumber.length){places=this.customLenNumber.length-places;this.decimalLen+=places;this.customLenNumber=this.customLenNumber.slice(0,places)+"."+this.customLenNumber.slice(places);return(+this.customLenNumber).toString()}else{places-=this.customLenNumber.length;return this.customLenNumber=(+(this.customLenNumber="0."+"0".repeat(places)+this.customLenNumber)).toString()}}}export default Decimal;import{keyBindings,keyCheck}from"./keybindings.js";import calculator from"./calculator.js";const numbers=document.querySelectorAll(".number");const operators=document.querySelectorAll(".operator");const decimalSign=document.querySelector("#decimal-sign");const equalSign=document.querySelector("#equal-sign");const deleteDigit=document.querySelector("#delete-digit");const clearEntry=document.querySelector("#clear-entry");const clearAll=document.querySelector("#clear-all");numbers.forEach(number=>{number.addEventListener("click",()=>{calculator.addNumber(number.textContent)})});operators.forEach(operator=>{operator.addEventListener("click",()=>{if(calculator.operator===undefined){if(calculator.number1===""&&operator.id==="oper-minus")calculator.addNumber("-");else calculator.addOperator(operator.id)}else{calculator.calculate();calculator.addOperator(operator.id)}})});decimalSign.addEventListener("click",()=>{calculator.addDecimalSign()});equalSign.addEventListener("click",()=>{calculator.calculate()});deleteDigit.addEventListener("click",()=>{calculator.deleteLastDigit()});clearEntry.addEventListener("click",()=>{calculator.reset()});document.addEventListener("keydown",e=>{keyCheck(e,keyBindings)});import calculator from"./calculator.js";const keyBindings={numbers:{0:[{key:"0"},{key:"o"}],1:[{key:"1"}],2:[{key:"2"}],3:[{key:"3"}],4:[{key:"4"}],5:[{key:"5"}],6:[{key:"6"}],7:[{key:"7"}],8:[{key:"8"}],9:[{key:"9"}]},operators:{"oper-minus":[{key:"-"},{key:"s"}],"oper-plus":[{key:"+"},{key:"p"}],"oper-divide":[{key:"/"},{key:"d"}],"oper-multiply":[{key:"*"},{key:"x"},{key:"m"}]},special:{deleteDigit:[{ctrlKey:false,shiftKey:false,key:"Backspace"}],clearEntry:[{ctrlKey:false,shiftKey:true,key:"Backspace"}],clearAll:[{ctrlKey:true,shiftKey:true,key:"Backspace"}]},other:{decimalSign:[{key:"."}],equalSign:[{key:"="},{key:"Enter"},{key:"c",ctrlKey:true}]}};const keyCheck=(event,keybindings)=>{Object.entries(keybindings).forEach(property=>{const keyCategory=property[0];Object.entries(property[1]).forEach(eliteProperty=>{const numberOutput=eliteProperty[0];eliteProperty[1].forEach(keyBinding=>{let allCorrectKeysPressed=true;Object.entries(keyBinding).forEach(keyDown=>{const keyName=keyDown[0];const keyValue=keyDown[1];if(keyName==="shiftKey"){if(event.shiftKey!==keyValue)allCorrectKeysPressed=false}else if(keyName==="ctrlKey"){if(event.ctrlKey!==keyValue)allCorrectKeysPressed=false}else if(keyName==="key"){if(event.key!==keyValue)allCorrectKeysPressed=false}});if(keyCategory==="numbers"){if(allCorrectKeysPressed){calculator.addNumber(numberOutput)}}else if(keyCategory==="operators"){if(allCorrectKeysPressed){if(calculator.operator===undefined){if(calculator.number1===""&&numberOutput==="oper-minus")calculator.addNumber("-");else calculator.addOperator(numberOutput)}else{calculator.calculate();calculator.addOperator(numberOutput)}}}else if(keyCategory==="special"){if(allCorrectKeysPressed){if(numberOutput==="deleteDigit")calculator.deleteLastDigit();if(numberOutput==="clearEntry")calculator.reset()}}else if(keyCategory==="other"){if(allCorrectKeysPressed){if(numberOutput==="decimalSign")calculator.addDecimalSign();if(numberOutput==="equalSign")calculator.calculate()}}})})})};export{keyBindings,keyCheck};